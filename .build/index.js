function M(E){const w=Object.prototype.toString.call(E).slice(8,-1);if(console.log({type:w,thing:E}),w==="Object"&&E instanceof Map)return"Map";if(w==="Object"&&E instanceof Set)return"Set";return w}var Q=function(E){switch(E){case'"':return'\\"';case"<":return"\\u003C";case"\\":return"\\\\";case"\n":return"\\n";case"\r":return"\\r";case"\t":return"\\t";case"\b":return"\\b";case"\f":return"\\f";case"\u2028":return"\\u2028";case"\u2029":return"\\u2029";default:return E<" "?`\\u${E.charCodeAt(0).toString(16).padStart(4,"0")}`:""}};function J(E){let w="",B=0;const q=E.length;for(let P=0;P<q;P+=1){const z=E[P],S=Q(z);if(S)w+=E.slice(B,P)+S,B=P+1}return`"${B===0?E:w+E.slice(B)}"`}var N=(E,w,B,q)=>{if(typeof w==="string")w=w.replace(/\[(\w+)\]/g,".$1").split(".");let P=E;console.log(P,B,w,q);for(let z=0;z<w.length;z++){const S=w[z];if(z===w.length-1)if(q==="MAP")P.set(S,B);else if(q==="SET")P.add(B);else P[S]=B;else{if(P[S]===void 0)P[S]=q==="SET"?new Set:q==="MAP"?new Map:/^\d+$/.test(w[z+1])?[]:{};P=P[S]}}return E};var X=(E,w=new FormData)=>{if(E===void 0)return w;return L({value:E},w)},L=(E,w,B="",q)=>{const P=M(E),z=B||"";let S=`${P} | ${z}`;if(q)S+=` | ${q}`;const A=z==="";switch(P){case"Null":w.append(S,"null");break;case"Undefined":w.append(S,"undefined");break;case"Number":case"String":case"Boolean":w.append(S,String(E));break;case"BigInt":w.append(S,E);break;case"Date":w.append(S,E.toISOString());break;case"RegExp":const{source:C,flags:G}=E;w.append(S,G?`[${J(C)},"${G}"]`:`[${J(C)}]`);break;case"File":w.append(S,E);break;case"Set":case"Array":w.append(S,"[]"),E.forEach((H,I)=>{L(H,w,`${z}[${I}]`,P==="Set"?"SET":void 0)});break;case"Object":case"Map":if(!A)w.append(S,"{}");for(let[H,I]of P==="Map"?E.entries():Object.entries(E))L(I,w,`${z===""?"":`${z}.`}${H}`,P==="Map"?"MAP":void 0);break;default:break}return w},Y=(E)=>{const{value:w}=U(E);return w},U=(E)=>{const w={};for(let[B,q]of E.entries()){const[P,z,S]=B.split(" | "),A=(C)=>N(w,z,C,S);switch(P){case"Number":A(Number(q));break;case"String":A(q);break;case"Boolean":A(q==="true");break;case"BigInt":A(BigInt(q));break;case"File":A(q);break;case"Date":A(new Date(q));break;case"RegExp":const[C,G]=JSON.parse(q);A(new RegExp(C,G));break;case"Undefined":A(void 0);break;case"Null":A(null);break;case"Array":A([]);break;case"Object":A({});break;case"Map":A(new Map);break}}return w};export{X as formify,Y as deform};
